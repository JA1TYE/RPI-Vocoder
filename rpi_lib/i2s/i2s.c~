#include "rpi_i2s.h"

uint32_t I2S_txCanWrite(void){
	return (((*I2S_CS_A) & (1 << I2S_CS_A_TXW)) == 0)?0:1;
}

void I2S_Write(int16_t left,int16_t right){
	*I2S_FIFO_A = (left << 16)|(right & 0xffff);
}

void I2S_Init(void){
	int i = 0;

	//Set Clock
	*CM_PCMCTL = 0x5a000021;//SRC -> OSC,KILL
	//19.2M/(48k * 64fs) = 6.25
	//23-12 Integer part
	//11-10 Fractional part
	*CM_PCMDIV = 0x5a000000 | (6 << 12)| (1 << 10);
	*CM_PCMCTL = 0x5a000211;	

	//Set Pin Functions
	//Maybe needs this?
	//GPIO18 & 19 -> ALT0
	*GPFSEL1 &= ~((7 << (8 * 3))|(7 << (9 * 3)));
	*GPFSEL1 |=  ((4 << (8 * 3))|(4 << (9 * 3)));
	//GPIO21 -> ALT0
	*GPFSEL2 &= ~(7 << (1 * 3));
	*GPFSEL2 |=  (4 << (1 * 3));

	//GPIO28 & 29 -> ALT2
	*GPFSEL2 &= ~((7 << (8 * 3))|(7 << (9 * 3)));
	*GPFSEL2 |=  ((6 << (8 * 3))|(6 << (9 * 3)));

	//GPIO31 -> ALT2
	*GPFSEL3 &= ~(7 << (1 * 3));
	*GPFSEL3 |=  (6 << (1 * 3));
	
	//Enable the I2S peripheral
	*I2S_CS_A |= (1 << I2S_EN);	

	//Set the MODE_A Reg.
	*I2S_MODE_A = (1 << I2S_FTXP)|((64 - 1) << I2S_FLEN)|(32 << I2S_FSLEN);
	
	//Set the TXC_A Reg.
	*I2S_TXC_A = 	(1 << I2S_CH1EN)|(1  << I2S_CH1POS)|(8 << I2S_CH1WID)|
			(1 << I2S_CH2EN)|(32 << I2S_CH2POS)|(8 << I2S_CH2WID);

	//Assert the TXCLR
	*I2S_CS_A |= (1 << I2S_TXCLR)|(1 << I2S_SYNC);
	//Wait 2 PCM_CLK
	while(*I2S_CS_A & (1 << I2S_SYNC));

	//Set TXFIFO Threshold
	*I2S_CS_A |= (3 << I2S_TXTHR);
	
	//Fill the TX FIFO
	for(i = 0;i < 32;i++){
		I2S_Write(0,0);
	}

	//Enable the I2S peripheral
	*I2S_CS_A |= (1 << I2S_EN);	

	//Start transmission
	*I2S_CS_A |= (1 << I2S_TXON);
}

void I2S_deInit(void){
	//End transmission
	*I2S_CS_A &= ~(1 << I2S_TXON);
}

